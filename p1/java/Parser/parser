package Parser;

import java_cup.runtime.*;
import AST.*;

parser code {:
public void syntax_error(Symbol s) {
  report_error("Error de sintaxis en linea " + s.left, null);
}

public void unrecovered_syntax_error(Symbol s) throws
  java.lang.Exception {
  report_fatal_error("", null);
}
:};

terminal IF, THEN, ELSE, END, WHILE, PLOT, DO, NOT, AND, OR, SIZE, PROG,
INT2REAL, REAL2INT, VARS, SENO, COSENO, EXPONENCIAL, PC, ASOP, MENORQUE,
MAYORQUE, MAS, DIV, POR, PAREN, TESIS, IGUALQUE, COMA, MENOS

terminal Integer TIPO, CENT, CREAL, COLOR; // TIPO:es para diferenciar entre distintas variables, CENT->int, CREAL->real,COLOR->color
terminal Boolean CLOG; //Para bool
terminal String IDENT;
//no se si se puede agrupar más, la clase Sentencia estoy bastante seguro de que es asi
non terminal Prog Prog;
non terminal VDef VDef;
non terminal Vars Vars;
non terminal Decl Decl;
non terminal Size Size;
non terminal LVar LVar;
non terminal Inp Inp;
non terminal Sentencia Sent, SentSimp, Asign, Cond, Repet;
non terminal Plot Plot;
non terminal Exp Exp; 

precedence left OR;
precedence left AND;
precedence left NOT;
precedence right IGUALQUE;
precedence right MENORQUE, MAYORQUE;
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence left MENOS;  //- (opuesto) MENOS SE REPITE, ES EL MISMO TOKEN -?

start with Prog;

//en :RESULT, algunas se hace new y otras no, por qué?
Prog ::= PROG IDENT:i1 Inp:in Vars:v Size:s Sent:e {:RESULT=new Progv(i1, in, v, s, e); :} ;

Inp ::= PAREN LVar:lv TESIS {:RESULT=new Inp1(lv); :} | {: RESULT = null; :} ;

Vars ::= VARS VDef:vd {: RESULT = new Vars1(vd); :} | {: RESULT = null; :} ;

Decl ::= TIPO:t LVar:l  {:RESULT=new Decl(t.intValue(), l); :} ;

LVar ::= IDENT:i  {:RESULT=new LVar2(i); :} | IDENT:i COMA LVar:l {:RESULT=new LVar1(i,l); :} ;

Size ::= SIZE PAREN Exp:exp1 COMA Exp:exp2 TESIS PC {: RESULT = new Size(exp1, exp2); :} ;

Sent ::= SentSimp:ss PC Sent:s {: RESULT = new Sent(ss, s); :} | SentSimp:ss PC {: RESULT = ss; :} ;

SentSimp ::= Asign:as {: RESULT = as; :} | Cond:c {: RESULT = c; :} | Repet:r {: RESULT = r; :} | Plot:p {: RESULT = p; :} ;

Asign::= IDENT:id ASOP Exp:e  {:RESULT=new Asignacion(id, e); :} ;

Cond::= IF Exp:e THEN Sent:s1 END {:RESULT=new Condicional1(e, s1); :} | IF Exp:e THEN Sent:s1 ELSE Sent:s2 END {:RESULT= new Condicional2(e,s1,s2); :} ;

Repet ::= WHILE Exp:e DO Sent:s END {:RESULT=new Iteracion(e, s); :} ;

Plot ::= PLOT PAREN COLOR COMA Exp:e1 COMA Exp:e2 TESIS {:RESULT=new Dibujo(e1, e2); :} ;

Exp::= CLOG:c {:RESULT=new ConstanteBooleana(c.booleanValue()); :}
      | IDENT:s {:RESULT=new Variable(s); :}
      | Exp:e1 MAS Exp:e2 {:RESULT=new Suma(e1,e2); :}    
      | CENT:n {:RESULT=new ConstanteEntera(n.intValue()); :}
      | PAREN Exp:e TESIS {:RESULT= e; :}
      | Exp:e1 IGUALQUE Exp:e2 {:RESULT=new IgualQue(e1, e2); :} ;


//chatgpt
Exp ::= ID                     {: RESULT = new IdentifierExp(val(1)); :}
       | '(' Exp ')'           {: RESULT = val(2); :}
       | INTEGER_CONST         {: RESULT = new IntConstExp(val(1)); :}
       | Exp '+' Exp           {: RESULT = new PlusExp(val(1), val(3)); :}
       | Exp '-' Exp           {: RESULT = new MinusExp(val(1), val(3)); :}
       | Exp '*' Exp           {: RESULT = new TimesExp(val(1), val(3)); :}
       | Exp '/' Exp           {: RESULT = new DivideExp(val(1), val(3)); :}
       | '-' Exp %prec UMINUS  {: RESULT = new NegateExp(val(2)); :}
       | Real2Int '(' Exp ')'  {: RESULT = new Real2IntExp(val(3)); :}
       | Int2Real '(' Exp ')'  {: RESULT = new Int2RealExp(val(3)); :}
       | Seno '(' Exp ')'      {: RESULT = new SenoExp(val(3)); :}
       | Coseno '(' Exp ')'    {: RESULT = new CosenoExp(val(3)); :}
       | Exp '>' Exp           {: RESULT = new GreaterThanExp(val(1), val(3)); :}
       | Exp '<' Exp           {: RESULT = new LessThanExp(val(1), val(3)); :}
       | '=' Exp               {: RESULT = new EqualExp(val(2)); :}
       | true                  {: RESULT = new TrueExp(); :}
       | false                 {: RESULT = new FalseExp(); :}
       | Exp and Exp           {: RESULT = new AndExp(val(1), val(3)); :}
       | Exp or Exp            {: RESULT = new OrExp(val(1), val(3)); :}
       | not Exp               {: RESULT = new NotExp(val(2)); :} ;
