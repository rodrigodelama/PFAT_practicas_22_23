
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\010\000\002\010" +
    "\005\000\002\010\002\000\002\004\004\000\002\004\002" +
    "\000\002\003\004\000\002\003\005\000\002\005\004\000" +
    "\002\007\003\000\002\007\005\000\002\006\011\000\002" +
    "\011\005\000\002\011\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\005" +
    "\000\002\014\007\000\002\014\011\000\002\015\007\000" +
    "\002\016\012\000\002\017\003\000\002\017\005\000\002" +
    "\017\003\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\004\000\002\017\006" +
    "\000\002\017\003\000\002\017\006\000\002\017\006\000" +
    "\002\017\006\000\002\017\006\000\002\017\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\004\000\002\017" +
    "\005\000\002\017\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\017\004\001\002\000\004\050\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\016\ufffe\022\ufffe\035\011\001\002\000\006\016" +
    "\ufffc\022\017\001\002\000\004\050\013\001\002\000\004" +
    "\036\016\001\002\000\010\026\ufff8\036\ufff8\040\014\001" +
    "\002\000\004\050\013\001\002\000\006\026\ufff7\036\ufff7" +
    "\001\002\000\006\016\uffff\022\uffff\001\002\000\004\043" +
    "\154\001\002\000\004\016\022\001\002\000\012\004\116" +
    "\010\113\011\115\050\114\001\002\000\004\035\023\001" +
    "\002\000\032\013\036\020\026\021\040\023\035\024\027" +
    "\025\033\035\032\041\025\044\034\045\037\047\031\050" +
    "\024\001\002\000\036\005\uffea\012\uffea\014\uffea\015\uffea" +
    "\026\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\036" +
    "\uffea\037\uffea\040\uffea\041\uffea\001\002\000\032\013\036" +
    "\020\026\021\040\023\035\024\027\025\033\035\032\041" +
    "\025\044\034\045\037\047\031\050\024\001\002\000\004" +
    "\035\106\001\002\000\004\035\103\001\002\000\026\014" +
    "\043\015\053\030\046\031\047\032\050\033\051\034\045" +
    "\037\054\040\077\041\044\001\002\000\036\005\uffdc\012" +
    "\uffdc\014\uffdc\015\uffdc\026\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\032\013\036\020\026\021\040\023\035\024\027" +
    "\025\033\035\032\041\025\044\034\045\037\047\031\050" +
    "\024\001\002\000\004\035\072\001\002\000\036\005\uffe8" +
    "\012\uffe8\014\uffe8\015\uffe8\026\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\001\002\000\004\035\067\001\002\000\032\013\036\020" +
    "\026\021\040\023\035\024\027\025\033\035\032\041\025" +
    "\044\034\045\037\047\031\050\024\001\002\000\036\005" +
    "\uffe1\012\uffe1\014\uffe1\015\uffe1\026\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\001\002\000\004\035\041\001\002\000\032\013\036" +
    "\020\026\021\040\023\035\024\027\025\033\035\032\041" +
    "\025\044\034\045\037\047\031\050\024\001\002\000\026" +
    "\014\043\015\053\030\046\031\047\032\050\033\051\034" +
    "\045\036\052\037\054\041\044\001\002\000\032\013\036" +
    "\020\026\021\040\023\035\024\027\025\033\035\032\041" +
    "\025\044\034\045\037\047\031\050\024\001\002\000\032" +
    "\013\036\020\026\021\040\023\035\024\027\025\033\035" +
    "\032\041\025\044\034\045\037\047\031\050\024\001\002" +
    "\000\032\013\036\020\026\021\040\023\035\024\027\025" +
    "\033\035\032\041\025\044\034\045\037\047\031\050\024" +
    "\001\002\000\032\013\036\020\026\021\040\023\035\024" +
    "\027\025\033\035\032\041\025\044\034\045\037\047\031" +
    "\050\024\001\002\000\032\013\036\020\026\021\040\023" +
    "\035\024\027\025\033\035\032\041\025\044\034\045\037" +
    "\047\031\050\024\001\002\000\032\013\036\020\026\021" +
    "\040\023\035\024\027\025\033\035\032\041\025\044\034" +
    "\045\037\047\031\050\024\001\002\000\032\013\036\020" +
    "\026\021\040\023\035\024\027\025\033\035\032\041\025" +
    "\044\034\045\037\047\031\050\024\001\002\000\036\005" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\026\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\001\002\000\032\013\036\020\026\021\040\023\035" +
    "\024\027\025\033\035\032\041\025\044\034\045\037\047" +
    "\031\050\024\001\002\000\032\013\036\020\026\021\040" +
    "\023\035\024\027\025\033\035\032\041\025\044\034\045" +
    "\037\047\031\050\024\001\002\000\036\005\uffd8\012\uffd8" +
    "\014\uffd8\015\uffd8\026\uffd8\030\046\031\047\032\050\033" +
    "\051\034\045\036\uffd8\037\054\040\uffd8\041\044\001\002" +
    "\000\036\005\uffda\012\uffda\014\043\015\uffda\026\uffda\030" +
    "\046\031\047\032\050\033\051\034\045\036\uffda\037\054" +
    "\040\uffda\041\044\001\002\000\036\005\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002\000" +
    "\036\005\uffe7\012\uffe7\014\uffe7\015\uffe7\026\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\051\034\045\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\001\002\000\036\005\uffd6\012\uffd6\014\uffd6" +
    "\015\uffd6\026\uffd6\030\046\031\047\032\050\033\051\034" +
    "\045\036\uffd6\037\uffd6\040\uffd6\041\044\001\002\000\036" +
    "\005\uffd7\012\uffd7\014\uffd7\015\uffd7\026\uffd7\030\046\031" +
    "\047\032\050\033\051\034\045\036\uffd7\037\uffd7\040\uffd7" +
    "\041\044\001\002\000\036\005\uffe5\012\uffe5\014\uffe5\015" +
    "\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002\000\036\005" +
    "\uffe6\012\uffe6\014\uffe6\015\uffe6\026\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\051\034\045\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\001\002\000\036\005\uffdb\012\uffdb\014\uffdb\015\uffdb" +
    "\026\uffdb\030\046\031\047\032\050\033\051\034\045\036" +
    "\uffdb\037\054\040\uffdb\041\044\001\002\000\036\005\uffd9" +
    "\012\uffd9\014\uffd9\015\uffd9\026\uffd9\030\046\031\047\032" +
    "\050\033\051\034\045\036\uffd9\037\054\040\uffd9\041\044" +
    "\001\002\000\032\013\036\020\026\021\040\023\035\024" +
    "\027\025\033\035\032\041\025\044\034\045\037\047\031" +
    "\050\024\001\002\000\026\014\043\015\053\030\046\031" +
    "\047\032\050\033\051\034\045\036\071\037\054\041\044" +
    "\001\002\000\036\005\uffdf\012\uffdf\014\uffdf\015\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\001\002\000\032\013\036\020" +
    "\026\021\040\023\035\024\027\025\033\035\032\041\025" +
    "\044\034\045\037\047\031\050\024\001\002\000\026\014" +
    "\043\015\053\030\046\031\047\032\050\033\051\034\045" +
    "\036\074\037\054\041\044\001\002\000\036\005\uffdd\012" +
    "\uffdd\014\uffdd\015\uffdd\026\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001" +
    "\002\000\026\014\043\015\053\030\046\031\047\032\050" +
    "\033\051\034\045\036\076\037\054\041\044\001\002\000" +
    "\036\005\uffe9\012\uffe9\014\uffe9\015\uffe9\026\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\001\002\000\032\013\036\020\026\021\040" +
    "\023\035\024\027\025\033\035\032\041\025\044\034\045" +
    "\037\047\031\050\024\001\002\000\026\014\043\015\053" +
    "\030\046\031\047\032\050\033\051\034\045\036\101\037" +
    "\054\041\044\001\002\000\004\026\102\001\002\000\012" +
    "\004\ufff6\010\ufff6\011\ufff6\050\ufff6\001\002\000\032\013" +
    "\036\020\026\021\040\023\035\024\027\025\033\035\032" +
    "\041\025\044\034\045\037\047\031\050\024\001\002\000" +
    "\026\014\043\015\053\030\046\031\047\032\050\033\051" +
    "\034\045\036\105\037\054\041\044\001\002\000\036\005" +
    "\uffde\012\uffde\014\uffde\015\uffde\026\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\036\uffde\037\uffde\040\uffde\041" +
    "\uffde\001\002\000\032\013\036\020\026\021\040\023\035" +
    "\024\027\025\033\035\032\041\025\044\034\045\037\047" +
    "\031\050\024\001\002\000\026\014\043\015\053\030\046" +
    "\031\047\032\050\033\051\034\045\036\110\037\054\041" +
    "\044\001\002\000\036\005\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\026\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\001\002\000\036\005\uffe3" +
    "\012\uffe3\014\uffe3\015\uffe3\026\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\001\002\000\004\026\ufff2\001\002\000\032\013\036\020" +
    "\026\021\040\023\035\024\027\025\033\035\032\041\025" +
    "\044\034\045\037\047\031\050\024\001\002\000\004\027" +
    "\144\001\002\000\004\035\135\001\002\000\032\013\036" +
    "\020\026\021\040\023\035\024\027\025\033\035\032\041" +
    "\025\044\034\045\037\047\031\050\024\001\002\000\004" +
    "\026\ufff3\001\002\000\004\026\ufff1\001\002\000\004\026" +
    "\124\001\002\000\004\026\ufff0\001\002\000\004\002\000" +
    "\001\002\000\020\002\ufff4\004\116\006\ufff4\007\ufff4\010" +
    "\113\011\115\050\114\001\002\000\010\002\ufff5\006\ufff5" +
    "\007\ufff5\001\002\000\026\005\127\014\043\015\053\030" +
    "\046\031\047\032\050\033\051\034\045\037\054\041\044" +
    "\001\002\000\012\004\116\010\113\011\115\050\114\001" +
    "\002\000\006\006\131\007\132\001\002\000\012\004\116" +
    "\010\113\011\115\050\114\001\002\000\004\026\uffee\001" +
    "\002\000\004\007\134\001\002\000\004\026\uffed\001\002" +
    "\000\004\046\136\001\002\000\004\040\137\001\002\000" +
    "\032\013\036\020\026\021\040\023\035\024\027\025\033" +
    "\035\032\041\025\044\034\045\037\047\031\050\024\001" +
    "\002\000\026\014\043\015\053\030\046\031\047\032\050" +
    "\033\051\034\045\037\054\040\141\041\044\001\002\000" +
    "\032\013\036\020\026\021\040\023\035\024\027\025\033" +
    "\035\032\041\025\044\034\045\037\047\031\050\024\001" +
    "\002\000\026\014\043\015\053\030\046\031\047\032\050" +
    "\033\051\034\045\036\143\037\054\041\044\001\002\000" +
    "\004\026\uffeb\001\002\000\032\013\036\020\026\021\040" +
    "\023\035\024\027\025\033\035\032\041\025\044\034\045" +
    "\037\047\031\050\024\001\002\000\026\014\043\015\053" +
    "\026\uffef\030\046\031\047\032\050\033\051\034\045\037" +
    "\054\041\044\001\002\000\026\012\147\014\043\015\053" +
    "\030\046\031\047\032\050\033\051\034\045\037\054\041" +
    "\044\001\002\000\012\004\116\010\113\011\115\050\114" +
    "\001\002\000\004\007\151\001\002\000\004\026\uffec\001" +
    "\002\000\004\016\ufffd\001\002\000\004\026\156\001\002" +
    "\000\004\050\013\001\002\000\004\026\ufff9\001\002\000" +
    "\006\016\ufffb\043\154\001\002\000\004\016\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\007\001\001" +
    "\000\004\004\017\001\001\000\004\007\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\151\005" +
    "\152\001\001\000\004\006\020\001\001\000\016\011\122" +
    "\012\120\013\116\014\111\015\117\016\121\001\001\000" +
    "\002\001\001\000\004\017\027\001\001\000\002\001\001" +
    "\000\004\017\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\041\001\001\000\002\001\001\000" +
    "\004\017\064\001\001\000\004\017\063\001\001\000\004" +
    "\017\062\001\001\000\004\017\061\001\001\000\004\017" +
    "\060\001\001\000\004\017\057\001\001\000\004\017\056" +
    "\001\001\000\002\001\001\000\004\017\055\001\001\000" +
    "\004\017\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\124\012\120\013" +
    "\116\014\111\015\117\016\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\127\012\120\013\116\014" +
    "\111\015\117\016\121\001\001\000\002\001\001\000\016" +
    "\011\132\012\120\013\116\014\111\015\117\016\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\137\001" +
    "\001\000\002\001\001\000\004\017\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\011\147\012\120" +
    "\013\116\014\111\015\117\016\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\154\001\001\000\002\001\001\000\006\003" +
    "\156\005\152\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s) {
  report_error("Error de sintaxis en linea " + s.left, null);
}

public void unrecovered_syntax_error(Symbol s) throws
  java.lang.Exception {
  report_fatal_error("", null);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Prog ::= PROG IDENT Inp Vars Size Sent 
            {
              Prog RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Inp in = (Inp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vars v = (Vars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Size s = (Size)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia e = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Prog(i1, in, v, s, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inp ::= PAREN LVar TESIS 
            {
              Inp RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LVar lv = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Inp1(lv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inp ::= 
            {
              Inp RESULT =null;
		RESULT = new Inp1(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Vars ::= VARS VDef 
            {
              Vars RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VDef vd = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Vars1(vd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Vars ::= 
            {
              Vars RESULT =null;
		RESULT = new Vars1(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VDef ::= Decl PC 
            {
              VDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new VDef1(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VDef",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VDef ::= Decl PC VDef 
            {
              VDef RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VDef v = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new VDef2(d,v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VDef",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= TIPO LVar 
            {
              Decl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LVar l = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Decl(t.intValue(), l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LVar ::= IDENT 
            {
              LVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LVar1(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LVar ::= IDENT COMA LVar 
            {
              LVar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LVar l = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new LVar2(i, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LVar",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Size ::= SIZE PAREN Exp COMA Exp TESIS PC 
            {
              Size RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Size(exp1, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Size",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sent ::= SentSimp PC Sent 
            {
              Sentencia RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentencia ss = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Sent1(ss, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sent",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sent ::= SentSimp PC 
            {
              Sentencia RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia ss = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sent",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentSimp ::= Asign 
            {
              Sentencia RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia as = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SentSimp ::= Cond 
            {
              Sentencia RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia c = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SentSimp ::= Repet 
            {
              Sentencia RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia r = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SentSimp ::= Plot 
            {
              Sentencia RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Plot p = (Plot)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SentSimp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Asign ::= IDENT ASOP Exp 
            {
              Sentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Asignacion(id, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Cond ::= IF Exp THEN Sent END 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Condicional1(e, s1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Cond ::= IF Exp THEN Sent ELSE Sent END 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencia s1 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s2 = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Condicional2(e, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cond",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Repet ::= WHILE Exp DO Sent END 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Iteracion(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Repet",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Plot ::= PLOT PAREN COLOR COMA Exp COMA Exp TESIS 
            {
              Plot RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Plot(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Plot",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= IDENT 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Variable(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new Parentesis(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= CENT 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstanteEntera(n.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Suma(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Menos(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp POR Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Multiplicacion(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Division(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= MENOS Exp 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Opuesto(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= REAL2INT PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new RealToInt(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= CREAL 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstanteReal(n.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= INT2REAL PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new IntToReal(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= SENO PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Seno(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= COSENO PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Coseno(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= EXPONENCIAL PAREN Exp TESIS 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Exponencial(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= CLOG 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstanteBooleana(c.booleanValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp AND Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new And(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= Exp OR Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Or(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= NOT Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Not(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= Exp IGUALQUE Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new IgualQue(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp MENORQUE Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new MenorQue(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= Exp MAYORQUE Exp 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new MayorQue(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
