package Lexer;

import Errors.LexerException;
import Parser.sym;

%%
%{
private java_cup.runtime.Symbol tok(int k, Object value) {
//  System.out.println("Token: " + k);
  return new java_cup.runtime.Symbol(k, yyline, 0, value); 
}
%}

%public 
%cup
%line
%yylexthrow{
LexerException
%yylexthrow} 
%eofval{
{return tok(sym.EOF, null); }
%eofval}

letra= [a-zA-Z]
Digito = [0-9]

%%
";"		{return tok(sym.PC, null); }
":="		{return tok(sym.ASOP, null); }
"<"		{return tok(sym.MENORQUE, null); }
">"		{return tok(sym.MAYORQUE, null); }
"+"		{return tok(sym.MAS, null); }
"/"		{return tok(sym.DIV, null); }
"*"		{return tok(sym.POR, null); }
"("		{return tok(sym.PAREN, null); }
")"		{return tok(sym.TESIS, null); }
"="		{return tok(sym.IGUALQUE, null); }
","		{return tok(sym.COMA, null); }
"-"		{return tok(sym.MENOS, null); } 
if    {return tok(sym.IF, null); }
then    {return tok(sym.THEN, null); }
else    {return tok(sym.ELSE, null); } 
end    {return tok(sym.END, null); } 
while    {return tok(sym.WHILE, null); } 
plot    {return tok(sym.PLOT, null); } 
do    {return tok(sym.DO, null); } 
not    {return tok(sym.NOT, null); } 
and		{return tok(sym.AND, null); }
or    {return tok(sym.OR, null); } 
size    {return tok(sym.SIZE, null); } 
PF2023    {return tok(sym.PROG, null); } 
Int2Real    {return tok(sym.INT2REAL, null); } 
Real2Int    {return tok(sym.REAL2INT, null); } 
vars    {return tok(sym.VARS, null); } 
seno    {return tok(sym.SENO, null); } 
coseno    {return tok(sym.COSENO, null); } 
exp    {return tok(sym.EXPONENCIAL, null); } 
pi    {return tok(sym.PI, null); }

//Tipos de variables
int		{return tok(sym.TIPO, new Integer(Tipos.tint)); }        
bool		{return tok(sym.TIPO, new Integer(Tipos.tbool)); }
real    {return tok(sym.TIPO, new Integer(Tipos.treal)); } //Tipos.t_tipo, seran atributos de la clase public static int.

//color    {return tok(sym.COLOR, new Integer(Tipos.tcolor);} -> no puede haber variables de tipo "color".
//sino, como restringimos en las reglas de producción que haya un  

//Constantes, que pongo de segundo parametro?
[0-9]+		{return tok(sym.CENT, new Integer(yytext())); } //que significa el interiot
true		{return tok(sym.CLOG, new Boolean(true)); }
false		{return tok(sym.CLOG, new Boolean(false)); }
white		{return tok(sym.COLOR, new Integer(0)); }
grey    {return tok(sym.COLOR, new Integer(1)); }
black   {return tok(sym.COLOR, new Integer(2)); }
red   {return tok(sym.COLOR, new Integer(3)); }
green   {return tok(sym.COLOR, new Integer(4)); }
blue    {return tok(sym.COLOR, new Integer(5)); }
yellow    {return tok(sym.COLOR, new Integer(6)); }
orange    {return tok(sym.COLOR, new Integer(7)); }
{Digito}*"."{Digito}+ | {Digito}+"." | ({Digito}*"."{Digito}+ | {Digito}+".") (e|E)("+"|"-"|λ){Digito}+ | {Digito}+(e|E)("+"|"-"|λ){Digito}+ {return tok(sym.CREAL, yytext()); }	      

//Identificadores
{letra} ({letra}|[0-9])*	{return tok(sym.IDENT, yytext()); } //yytext grabs text, and puts it inside

(" "|\n|\t|\r)+	{ }
.		{throw new LexerException("Illegal character in line " + yyline);}
