package Lexer;

import Errors.LexerException;
import Parser.sym;

%%
%{
private java_cup.runtime.Symbol tok(int k, Object value) {
    //System.out.println("Token: " + k);  //para depurar, comentar antes de entregar
  return new java_cup.runtime.Symbol(k, yyline, 0, value); 
}
%}

%public 
%cup
%line
%yylexthrow{
LexerException
%yylexthrow} 
%eofval{
{return tok(sym.EOF, null); }
%eofval}

letra= [a-zA-Z]
Digito = [0-9]

%%
";"		{return tok(sym.PC, null); }
":="		{return tok(sym.ASOP, null); }
"<"		{return tok(sym.MENORQUE, null); }
">"		{return tok(sym.MAYORQUE, null); }
"+"		{return tok(sym.MAS, null); }
"/"		{return tok(sym.DIV, null); }
"*"		{return tok(sym.POR, null); }
"("		{return tok(sym.PAREN, null); }
")"		{return tok(sym.TESIS, null); }
"="		{return tok(sym.IGUALQUE, null); }
","		{return tok(sym.COMA, null); }
"-"		{return tok(sym.MENOS, null); } 
if    {return tok(sym.IF, null); }
then    {return tok(sym.THEN, null); }
else    {return tok(sym.ELSE, null); } 
end    {return tok(sym.END, null); } 
while    {return tok(sym.WHILE, null); } 
plot    {return tok(sym.PLOT, null); } 
do    {return tok(sym.DO, null); } 
not    {return tok(sym.NOT, null); } 
and		{return tok(sym.AND, null); }
or    {return tok(sym.OR, null); } 
size    {return tok(sym.SIZE, null); } 
PF2023    {return tok(sym.PROG, null); } 
Int2Real    {return tok(sym.INT2REAL, null); } 
Real2Int    {return tok(sym.REAL2INT, null); } 
vars    {return tok(sym.VARS, null); } 
seno    {return tok(sym.SENO, null); } 
coseno    {return tok(sym.COSENO, null); } 
exp    {return tok(sym.EXPONENCIAL, null); } 

int		{return tok(sym.TIPO, 200); }        
bool		{return tok(sym.TIPO, 300); }
real    {return tok(sym.TIPO, 400); } 

[0-9]+		{return tok(sym.CENT, Integer.parseInt(yytext())); } 
true		{return tok(sym.CLOG, true); }
false		{return tok(sym.CLOG, false); }
white		{return tok(sym.COLOR, 0); }
grey    {return tok(sym.COLOR, 1); }
black   {return tok(sym.COLOR, 2); }
red   {return tok(sym.COLOR, 3); }
green   {return tok(sym.COLOR, 4); }
blue    {return tok(sym.COLOR, 5); }
yellow    {return tok(sym.COLOR, 6); }
orange    {return tok(sym.COLOR, 7); }
pi    {return tok(sym.PI, 3.14159f); }


{Digito}*"."{Digito}+|{Digito}+"."|({Digito}*"."{Digito}+|{Digito}+".")(e|E)(("+"|"-")?){Digito}+|{Digito}+(e|E)(("+"|"-")?){Digito}+ {return tok(sym.CREAL, Float.parseFloat(yytext())); }	         

{letra}({letra}|[0-9])*	{return tok(sym.IDENT, yytext()); }

(" "|\n|\t|\r)+	{ }
.		{throw new LexerException("Illegal character in line " + yyline);}
