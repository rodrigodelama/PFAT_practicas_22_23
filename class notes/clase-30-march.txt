//lo de siempre

prog Ejem
in int a, b;
out int x;
{x := a+b; }

public class Ejemplo {
	public static int Ejem(int a, int b) {
	
	}
}

implementacion------------------------------------------------------------------

import java.io;

public class static codeGenerator (String className, Prog ast) {
	try {
		BufferedWriter w = new BufferedWriter(new FileWriter(ClassName + ".java"));
		w.write("import GeneratedCodeLib.*;");
		w.newLine();
		w.write("import java.util.*;");
		w.newLine();
		w.write("public class " +  className + " {");
		w.newLine(); w.newLine();
		ast.generateCode(w);
		w.newLine();
		w.write("}"); w.newLine();
		w.close();
	} catch(IOException e) { //error message }
}


public interface Prog {
	public void ComputeAH1() throws CompilerExc;
	public void ComputeSt_Typ() throws CompilerExc;
	public voif generateCode(BufferedWriter w) throws IOException;
}


public class ProgV2 implements Prog {
	public final String programName;
	public final LDecl declIn;
	public final LDecl declOut;
	public final Statement st;
	public voif generateCode(BufferedWriter w) throws IOException {
								w.write("public static Vector<Variable>" + programName + "(" + declIn.generateArguments() + ") {");
	w.newLine();
	w.write( " Vector<Variable> _v = " + " new Vector<Variable>();");
	w.newLine();
	st.generateCode(w, " ");
	w.newLine();
	declOut.generateResult(w);
	w.newLine();
	w.write(" return _v;");
	w.newLine();
	w.write("}");
}


public interface LDecl {
	public String generateArguments();
	public void generateLocalVariables(BufferedWriter w) throws IOException;
	public void generateResult(BufferedWriter w) throws IOException;
}


caso -----------------------------------------------------------
in int a,b;      | --> Ejem(int a, int b, boolean c)
   bool c;       |				 ^            ^
				 |			Decl(a y b)      Decl
------------------------------------------------------------


public class LDecl1 implements LDecl {
	public final Decl d;
	public final LDecl ld;
	public String generateArguments() {
		return d.generateArguments() + " , " + ld.generateArguments();
	}

	public void generateLocalVariables(BufferedWriter w) throws IOException {
		w.write(" " + d.generateLocalVariables() + ";" );
		w.newLine();
		ld.generateLocalVariables(w);
	}

	public void generateResult(BufferedWriter w) throws IOException {
		d.generateResult(w);
		w.newLine();
		ld.generateResult(w);
	}

}
